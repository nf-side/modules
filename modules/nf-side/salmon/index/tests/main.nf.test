nextflow_process {

    name "Test Process SALMON_INDEX"
    script "../main.nf"
    process "SALMON_INDEX"
    tag "modules"
    tag "modules_nfcore"
    tag "salmon"
    tag "salmon/index"

    test("sarscov2") {

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = Channel.of(
                    [
                        [id: 'genome'],
                        file(params.modules_testdata_base_path + "genomics/sarscov2/genome/genome.fasta", checkIfExists: true),
                        file(params.modules_testdata_base_path + "genomics/sarscov2/genome/transcriptome.fasta", checkIfExists: true)
                    ]
                )
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.index.get(0).get(1)).exists() },
                { assert snapshot(
                    file(process.out.index[0][1]).listFiles().collect { it.getName() }.sort().toString(),
                    process.out.versions
                ).match()}
            )
        }

    }

    test("sarscov2 transcriptome only") {

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = Channel.of(
                    [
                        [id: 'genome'],
                        [],
                        file(params.modules_testdata_base_path + "genomics/sarscov2/genome/transcriptome.fasta", checkIfExists: true)
                    ]
                )
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.index.get(0).get(1)).exists() },
                { assert snapshot(
                    file(process.out.index[0][1]).listFiles().collect { it.getName() }.sort().toString(),
                    process.out.versions
                ).match()}
            )
        }

    }

    test("sarscov2 stub") {
        options "-stub"
        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = Channel.of(
                    [
                        [id: 'genome'],
                        file(params.modules_testdata_base_path + "genomics/sarscov2/genome/genome.fasta", checkIfExists: true),
                        file(params.modules_testdata_base_path + "genomics/sarscov2/genome/transcriptome.fasta", checkIfExists: true)
                    ]
                )
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.index.get(0).get(1)).exists() },
                { assert snapshot(
                    file(process.out.index[0][1]).listFiles().collect { it.getName() }.sort().toString(),
                    process.out.versions
                ).match()}
            )
        }
    }
}